#!/bin/bash 
# Eduard Boer 2018-01-08
# Script to backup a Linux system to a remote directory 
# With this script you know for sure that the entire system is backup up because all partitions are visible in the backup up using one tar file for each partition

# USAGE: Just Change The Line Below to the nfs/cifs mount point where backup must be written to and run the script

base_directory='/mnt/ChangeThisToYourMountedRemoteDirectory'

# Check if base_directoy is mounted
unmount=-1
if grep -qs $base_directory /proc/mounts
then
	#base_directoy is mounted, no unmount after this script is done
	unmount=0
else
	#base_directoy not mounted, mount now, and unmount after this script is done
	mount "$base_directory"
	unmount=1
fi

if grep -qs $base_directory /proc/mounts
then
	# define target directory and create it if needed
	target_directory=$base_directory'/'$HOSTNAME
	mkdir $target_directory &> /dev/null
	if cd $target_directory
	then
		exec &> backup.log	#all further output redirect to file
		set -x # echo commands 
		# get location of all mounted local partitions not being network mount, tmpfs etc. Just normal local partitions	    
		df -x tmpfs -x nfs -x cifs -x devtmpfs -x smbfs --output=source,target | grep "^/dev/" | awk '{ print $2}' | while read i 
		do 
			# define file name
			filename="backup_$HOSTNAME"`echo "$i" | tr / _`'.tar.gz'
			fullfilename="$target_directory"'/'"$filename"
			echo "Start backup of $i in $filename at `date`"
			# do backup
			tar -cpzf "$fullfilename" --exclude="$base_directory" --exclude=/dev --exclude=/proc --exclude=/sys --exclude=/tmp --one-file-system "$i"
		done
		echo "done `date`"
	else
		echo "backup error, can't change to directory"
	fi
	# all done (or not), now unmount if needed
	if [ $unmount = 1 ]
	then
		unmount "$base_directory"
	fi
else
	echo "backup error, $target_directory not mounted and mount didn't work"
fi
